{
  "ability": {
    "getPokemon": "select pokemon.species_id from pokemon_abilities join pokemon on pokemon_abilities.pokemon_id=pokemon.id where pokemon_abilities.ability_id = ? order by pokemon.species_id asc"
  },
  "pokemon": {
    "get": "select pokemon_species.id, pokemon_species_names.name, pokemon.height, pokemon.weight, pokemon.base_experience, pokemon.'order', pokemon.is_default, pokemon_species.gender_rate, pokemon_species_names.genus from pokemon_species join pokemon_species_names on pokemon_species.id = pokemon_species_names.pokemon_species_id join pokemon on pokemon_species.id = pokemon.species_id where pokemon_species.id = ? and pokemon_species_names.local_language_id = ?",
    "getAbilities": "select pokemon_abilities.ability_id as id, pokemon_abilities.slot, pokemon_abilities.is_hidden, ability_names.name from pokemon_abilities join ability_names on pokemon_abilities.ability_id = ability_names.ability_id where pokemon_abilities.pokemon_id = ? and ability_names.local_language_id = ? order by pokemon_abilities.slot asc",
    "getEggGroups": "select pokemon_egg_groups.egg_group_id as id, egg_group_prose.name from pokemon_egg_groups join egg_group_prose on pokemon_egg_groups.egg_group_id = egg_group_prose.egg_group_id where pokemon_egg_groups.species_id = ? and egg_group_prose.local_language_id = ?",
    "getLocations": "select locations.id, region_names.name as region, location_names.name as name from locations join location_names on locations.id=location_names.location_id join regions on locations.region_id=regions.id join region_names on regions.id=region_names.region_id where locations.id in (select distinct location_areas.location_id from encounters join location_areas on location_areas.id = encounters.location_area_id where encounters.pokemon_id = ?) and location_names.local_language_id = ? and region_names.local_language_id = ? order by regions.id asc",
    "getMoves": "select pokemon_moves.move_id as id, pokemon_moves.pokemon_move_method_id, pokemon_moves.level, machines.machine_number, move_names.name, moves.type_id from pokemon_moves join move_names on pokemon_moves.move_id = move_names.move_id join moves on pokemon_moves.move_id = moves.id left outer join (select * from machines where machines.version_group_id = ?) as machines on pokemon_moves.move_id = machines.move_id where pokemon_moves.pokemon_id = ? and pokemon_moves.version_group_id = ? and move_names.local_language_id = ? order by pokemon_moves.pokemon_move_method_id asc, pokemon_moves.level asc, machines.machine_number asc",
    "getTypes": "select pokemon_types.type_id as id, pokemon_types.slot, type_names.name from pokemon_types join type_names on pokemon_types.type_id = type_names.type_id where pokemon_types.pokemon_id = ? and type_names.local_language_id = ?",
    "getEvolutions": "select pokemon_species.evolves_from_species_id, evolves_from.name as before_pokemon_name, pokemon_evolution.evolved_species_id, pokemon_species_names.name as after_pokemon_name, pokemon_evolution.evolution_trigger_id, pokemon_evolution.trigger_item_id, pokemon_evolution.minimum_level, pokemon_evolution.location_id, pokemon_evolution.held_item_id, pokemon_evolution.time_of_day, pokemon_evolution.known_move_id, pokemon_evolution.known_move_type_id, pokemon_evolution.minimum_happiness, pokemon_evolution.minimum_beauty, pokemon_evolution.minimum_affection, pokemon_evolution.relative_physical_stats, pokemon_evolution.party_species_id, pokemon_evolution.party_type_id, pokemon_evolution.trade_species_id, pokemon_evolution.needs_overworld_rain, pokemon_evolution.turn_upside_down, pokemon_evolution.gender_id from pokemon_evolution join pokemon_species on pokemon_evolution.evolved_species_id = pokemon_species.id join pokemon_species_names on pokemon_evolution.evolved_species_id = pokemon_species_names.pokemon_species_id join pokemon_species_names as evolves_from on pokemon_species.evolves_from_species_id = evolves_from.pokemon_species_id  where pokemon_evolution.evolved_species_id in (select pokemon_species.id from pokemon_species where pokemon_species.evolution_chain_id = (select pokemon_species.evolution_chain_id from pokemon_species where pokemon_species.id = ?) and pokemon_species.evolves_from_species_id is not null) and pokemon_species_names.local_language_id = ? and evolves_from.local_language_id = ?",
    "getSingleTypeMatchUps": "select damage_type_id, damage_factor from type_efficacy where type_efficacy.damage_factor != 100 and type_efficacy.target_type_id = ? order by type_efficacy.damage_factor desc",
    "getDualTypeMatchUps": "select damage_type_id, count(damage_type_id) as dual_type, sum(damage_factor) as damage_factor from type_efficacy where damage_factor != 100 and target_type_id in (?, ?) group by damage_type_id order by damage_factor desc"
  },
  "move": {
    "get": "select moves.id, move_names.name, moves.power, moves.pp, moves.accuracy,moves.damage_class_id, move_effect_prose.short_effect from moves join move_names on moves.id = move_names.move_id join move_effect_prose on moves.effect_id = move_effect_prose.move_effect_id where moves.id = ? and move_names.local_language_id = ? and move_effect_prose.local_language_id = ?",
    "getMeta": "select moves.id, move_meta.crit_rate, move_meta.ailment_chance, move_meta.flinch_chance,move_meta.stat_chance from moves join move_meta on moves.id = move_meta.move_id where moves.id = ?",
    "getPokemon": "select distinct pokemon.species_id as id, pokemon_species_names.name from pokemon_moves join pokemon on pokemon_moves.pokemon_id = pokemon.id join pokemon_species_names on pokemon.species_id = pokemon_species_names.pokemon_species_id where pokemon_moves.move_id = ? and pokemon_moves.version_group_id = ? and pokemon_species_names.local_language_id = ? order by id asc",
    "getType": "select type_names.type_id as id, type_names.name from type_names join moves on type_names.type_id = moves.type_id where moves.id = ? and type_names.local_language_id = ? order by id asc"
  },
  "type": {
    "get": "select type_names.type_id as id,type_names.name from type_names where id = ? and type_names.local_language_id = ?",
    "getPokemon": "select distinct pokemon.species_id as id, pokemon_species_names.name from pokemon_types join pokemon on pokemon_types.pokemon_id = pokemon.id join pokemon_species_names on pokemon.species_id = pokemon_species_names.pokemon_species_id where pokemon_types.type_id = ? and pokemon_species_names.local_language_id = ? order by pokemon.species_id asc",
    "getMoves": "select moves.id, move_names.name, moves.type_id from moves join move_names on moves.id = move_names.move_id where moves.type_id = ? and move_names.local_language_id = ? order by moves.id asc",
    "getTypeMatchUps": "select type_efficacy.damage_type_id, type_names.name as damage_type_name, type_efficacy.target_type_id, target.name as target_type_name, type_efficacy.damage_factor from type_efficacy join type_names on type_efficacy.damage_type_id = type_names.type_id join type_names as target on type_efficacy.target_type_id = target.type_id where type_efficacy.damage_factor != 100 and (type_efficacy.target_type_id = ? or type_efficacy.damage_type_id = ?) and type_names.local_language_id = ? and target.local_language_id = ? order by type_efficacy.damage_factor desc"
  },
  "get": {
    "pokemon": "select pokemon_species.id, pokemon_species_names.name from pokemon_species join pokemon_species_names on pokemon_species_names.pokemon_species_id = pokemon_species.id where pokemon_species_names.local_language_id = ?",
    "moves": "select move_names.move_id as id, move_names.name from move_names where move_names.local_language_id = ? order by id asc",
    "types": "select type_names.type_id as id, type_names.name from type_names where type_names.local_language_id = ? order by id asc"
  }
}